Details
-------

Say we have a browser view that does something neat.

  >>> class NeatView(object):
  ...     def __init__(self, context, request):
  ...         self.context = context
  ...         self.request = request
  ...     def __call__(self):
  ...         return 'neat!'

We may want to make sure that this browser view can only be used after
the user has entered their e-mail and clicked on a link in the e-mail
to confirm their e-mail address.

To do this, we'll redefine the view using the ``confirm_email`` helper.

  >>> from collective.confirm_email import confirm_email
  >>> class ProtectedNeatView(object):
  ...     def __init__(self, context, request):
  ...         self.context = context
  ...         self.request = request
  ...     def __call__(self):
  ...         confirm_email(self)
  ...         return 'neat!'

Okay, time to try things out. Let's register the view.

  >>> from zope.component import provideAdapter
  >>> from zope.interface import Interface
  >>> from zope.publisher.interfaces import IRequest
  >>> provideAdapter(ProtectedNeatView, [Interface, IRequest], Interface, name=u'neat')

Now if we try to access the view, we'll get redirected to form to enter
our e-mail for confirmation.

  >>> from plone.testing.z2 import Browser
  >>> browser = Browser(layer['app'])
  >>> browser.open('http://nohost/neat')
  >>> browser.url
  'http://nohost/neat/@@confirm-email'
  >>> 'Please enter your email' in browser.contents
  True

Filling out the form causes an email to be sent to the email address that
was entered.

  >>> browser.getControl('Email Address').value = 'test@example.com'
  >>> browser.getControl('Send Confirmation').click()

  >>> from zope.component import getUtility
  >>> from Products.MailHost.interfaces import IMailHost
  >>> mailhost = getUtility(IMailHost)
  >>> len(mailhost.messages)
  1

(If we try to send one with an invalid email address, it is rejected.)

  >>> browser.goBack()
  >>> browser.getControl('Email Address').value = 'foobar'
  >>> browser.getControl('Send Confirmation').click()
  >>> 'You must enter a valid email' in browser.contents
  True

Now let's extract the confirmation URL from the email and open it. The code
will be validated and the browser will be redirected to the original view.

  >>> import re
  >>> url = re.search('(http://[^\s]+)', mailhost.messages.pop()).group(1)
  >>> url # doctest: +ELLIPSIS
  'http://nohost/neat/@@confirm-email/...'
  >>> browser.open(url)
  >>> browser.url
  'http://nohost/neat'

At this point the session has been marked as confirmed, so the target URL can
be reloaded as necessary without redirecting to the email confirmation step.

  >>> browser.open('http://nohost/neat')
  >>> browser.url
  'http://nohost/neat'

The email that was entered is also stored in the session, so it can be
accessed from the original view.

  >>> from collective.beaker.interfaces import ISession
  >>> def __call__(self):
  ...     return ISession(self.request)['collective.confirm_email.email']
  >>> ProtectedNeatView.__call__ = __call__
  >>> browser.open('http://nohost/neat')
  >>> browser.contents
  'test@example.com'

If we try to confirm using a made-up nonce, the confirmation view will complain.

  >>> browser.open('http://nohost/neat/@@confirm-email/foo')
  >>> 'your confirmation code is invalid or has expired.' in browser.contents
  True

If the user then re-submits the confirmation form, the URL will be corrected
to not include the bad nonce:

  >>> browser.getControl('Email Address').value = 'test@example.com'
  >>> browser.getControl('Send Confirmation').click()
  >>> url = re.search('(http://[^\s]+)', mailhost.messages.pop()).group(1)
  >>> 'foo' in url
  False
